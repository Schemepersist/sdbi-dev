General:

Don't forget to prevent your backup systems from trying to backup raw
database files, unless perhaps if the backup systems use the
filesystem stack to create snapshots, in which case you can hope the
database recovery mechanism will do the right thing if it's being
modified while being backed up.


It is STRONGLY recommended that when you use the command line to
interact with databases or most anything else in development, that you
do it in an environment that captures a transcript.  But beware of
capturing sensitive passwords in transcripts.


Tests will in general depend on the environment variable
SDBI_[ database name ]_PASSWORD being defined.  For example, for
PostgreSQL when using bash:

export SDBI_POSTGRESQL_PASSWORD="[ DO-NOT-CAPTURE-THIS! ]"

Replace [ DO-NOT-CAPTURE-THIS! ] with your password.


----------------

Getting schema information:

https://news.ycombinator.com/item?id=21510542

paulddraper 1 day ago [-] [-] [collapse whole thread]

> since "show the tables" isn't in SQL itself,
Actually

    SELECT table_name FROM information_schedule.tables;
But yes, that's harder to type/remember than \d.

--

lwb 1 day ago [-] [-] [collapse whole thread]

Does that really work for every version of SQL? This might change my life.

--

carlineng 1 day ago [-] [-] [collapse whole thread]

information_schema (not "schedule"; GP had a typo in the query) is part of the ANSI SQL standard[1] so should work with any database that implements the ANSI standard. Note that not all databases or SQL dialects comply with this.
[1] https://en.wikipedia.org/wiki/Information_schema

--

emmelaich 1 day ago [-] [-] [collapse whole thread]

Also, you can see a more or less complete "contents" listing of the recent draft standard here:
https://webstore.iec.ch/preview/info_isoiec9075-11%7Bed4.0%7Den.pdf

Not the actual standard though, that'll cost you a few hundred bucks.

[edit - you can see the 1992 complete version here; do a search for information_schema.

http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt

courtesy of Ian Winand - https://modern-sql.com/standard]

--

emmelaich 1 day ago [-] [-] [collapse whole thread]

Found a free 2011 draft - click the 2011 draft standard link at the bottom of https://www.wikiwand.com/en/SQL#/Sources
to get a zip file of pdfs. The schema is in 7IWD2-11-Schemata-2011-12.pdf

----------------

SQLite3:

https://sqlite.org/index.html

Should already be installed on your system, zero-admin to the point of
having an in memory database using ":memory:".


----------------

PostgreSQL:

https://www.postgresql.org/

For names for Debian based distributions, check:

http://apt.postgresql.org/pub/repos/apt/dists/

For example, for Ubuntu 18.04 LTS Bionic Beaver, put this line in
/etc/apt/sources.list.d/pgdg.list:

deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main


The final release/update of version 11 is scheduled to be November 9, 2023.

Install the following packages for the wire protocol net connector:

postgresql-11  	          core database server

Which should also install postgresql-client-11, "client libraries and
client binaries", needed for command line configuration of databases.

The default Linux installation location for data files should be /var/lib/postgresql/

Note partitioning using stock PostgreSQL is very immature:
https://www.postgresql.org/docs/release/11.5/


To configure the PostgreSQL 11(.5) test database for use by testuser
on Ubuntu 18.04 Bionic Beaver, this was done in a Gnu Emacs shell
buffer, hence the --no-readline and \pset pager initial settings.

su
su postgres -
[ if in Emacs buffer, ignore I/O errors, ***and don't try to use job control*** ]
psql --no-readline
\pset pager
SELECT version(); [ A very simple test of connectivity. ]
CREATE DATABASE testdb TEMPLATE template0 ENCODING UTF8 LC_COLLATE 'C' LC_CTYPE 'C';
CREATE USER testuser password '[ DO-NOT-CAPTURE-THIS! ]';
GRANT ALL ON SCHEMA public TO testuser;
\q

psql --no-readline testdb
\pset pager
SELECT version();
\d [ Should reply "Did not find any relations." ]


----------------

https://news.ycombinator.com/item?id=21450711

In MySQL, never use ‚Äúutf8‚Äù. Use ‚Äúutf8mb4‚Äù  https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434

----

mikl 1 hour ago [-] [-]

MySQL is a great example how extreme commitment to backwards compatibility makes your whole product backwards.
It is chock full of bugs and footguns that you can work around and mitigate if you know how to configure it correctly, but most of those improvements are still not the default.

And the `utf8` encoding, that does not fully support UTF-8 looks like it‚Äôll stay around forever. ‡≤†_‡≤†

As the author of the post says, much better to just use PostgreSQL, will save you a lot of headaches down the road.

----

donalhunt 2 hours ago [-] [-]

previous discussion: https://news.ycombinator.com/item?id=17310690
additional context (which the OP didn't reference):

https://mysqlserverteam.com/mysql-8-0-when-to-use-utf8mb3-over-utf8mb4/

https://mysqlserverteam.com/sushi-beer-an-introduction-of-utf8-support-in-mysql-8-0/

https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb3.html

hint: "Exactly the same set of characters is available in utf8mb3 and ucs2."

--------

In MySQL, never use ‚Äúutf8‚Äù. Use ‚Äúutf8mb4‚Äù.
Adam Hooper
Adam Hooper
Follow
May 13, 2016 ¬∑ 5 min read
Today‚Äôs bug: I tried to store a UTF-8 string in a MariaDB ‚Äúutf8‚Äù-encoded database, and Rails raised a bizarre error:

Incorrect string value: ‚Äò\xF0\x9F\x98\x83 <‚Ä¶‚Äô for column ‚Äòsummary‚Äô at row 1
This is a UTF-8 client and a UTF-8 server, in a UTF-8 database with a UTF-8 collation. The string, ‚ÄúüòÉ <‚Ä¶‚Äù, is valid UTF-8.

But here‚Äôs the rub: MySQL‚Äôs ‚Äúutf8‚Äù isn‚Äôt UTF-8.

The ‚Äúutf8‚Äù encoding only supports three bytes per character. The real UTF-8 encoding ‚Äî which everybody uses, including you ‚Äî needs up to four bytes per character.

MySQL developers never fixed this bug. They released a workaround in 2010: a new character set called ‚Äúutf8mb4‚Äù.

Of course, they never advertised this (probably because the bug is so embarrassing). Now, guides across the Web suggest that users use ‚Äúutf8‚Äù. All those guides are wrong.

In short:

MySQL‚Äôs ‚Äúutf8mb4‚Äù means ‚ÄúUTF-8‚Äù.
MySQL‚Äôs ‚Äúutf8‚Äù means ‚Äúa proprietary character encoding‚Äù. This encoding can‚Äôt encode many Unicode characters.
I‚Äôll make a sweeping statement here: all MySQL and MariaDB users who are currently using ‚Äúutf8‚Äù should actually use ‚Äúutf8mb4‚Äù. Nobody should ever use ‚Äúutf8‚Äù.

What‚Äôs encoding? What‚Äôs UTF-8?

Joel on Software wrote my favorite introduction. I‚Äôll abridge it.

Computers store text as ones and zeroes. The first letter in this paragraph was stored as ‚Äú01000011‚Äù and your computer drew ‚ÄúC‚Äù. Your computer chose ‚ÄúC‚Äù in two steps:

Your computer read ‚Äú01000011‚Äù and determined that it‚Äôs the number 67. That‚Äôs because 67 was encoded as ‚Äú01000011‚Äù.
Your computer looked up character number 67 in the Unicode character set, and it found that 67 means ‚ÄúC‚Äù.
The same thing happened on my end when I typed that ‚ÄúC‚Äù:

My computer mapped ‚ÄúC‚Äù to 67 in the Unicode character set.
My computer encoded 67, sending ‚Äú01000011‚Äù to this web server.
Character sets are a solved problem. Almost every program on the Internet uses the Unicode character set, because there‚Äôs no incentive to use another.

But encoding is more of a judgement call. Unicode has slots for over a million characters. (‚ÄúC‚Äù and ‚Äúüí©‚Äù are two such characters.) The simplest encoding, UTF-32, makes each character take 32 bits. That‚Äôs simple, because computers have been treating groups of 32 bits as numbers for ages, and they‚Äôre really good at it. But it‚Äôs not useful: it‚Äôs a waste of space.

UTF-8 saves space. In UTF-8, common characters like ‚ÄúC‚Äù take 8 bits, while rare characters like ‚Äúüí©‚Äù take 32 bits. Other characters take 16 or 24 bits. A blog post like this one takes about four times less space in UTF-8 than it would in UTF-32. So it loads four times faster.

You may not realize it, but our computers agreed on UTF-8 behind the scenes. If they didn‚Äôt, then when I type ‚Äúüí©‚Äù you‚Äôll see a mess of random data.

MySQL‚Äôs ‚Äúutf8‚Äù character set doesn‚Äôt agree with other programs. When they say ‚Äúüí©‚Äù, it balks.

A bit of MySQL history

Why did MySQL developers make ‚Äúutf8‚Äù invalid? We can guess by looking at commit logs.

MySQL supported UTF-8 since version 4.1. That was 2003 ‚Äî before today‚Äôs UTF-8 standard, RFC 3629.

The previous UTF-8 standard, RFC 2279, supported up to six bytes per character. MySQL developers coded RFC 2279 in the the first pre-pre-release version of MySQL 4.1 on March 28, 2002.

Then came a cryptic, one-byte tweak to MySQL‚Äôs source code in September: ‚ÄúUTF8 now works with up to 3 byte sequences only.‚Äù

Who asked for this change? Why? I can‚Äôt tell. There‚Äôs nothing on the mailing list around September 2003 that explains the change. (RFC 2279 was declared obsolete in November 2003 to make way for the current UTF-8 standard, RFC 3629.)

But I can guess why MySQL violated the standard.

Back in 2002, MySQL gave users a speed boost if users could guarantee that every row in a table had the same number of bytes. To do that, users would declare text columns as ‚ÄúCHAR‚Äù. Every record‚Äôs value in a ‚ÄúCHAR‚Äù column has the same number of characters. If you feed it too few characters, MySQL adds spaces to the end; if you feed it too many characters, MySQL truncates the last ones.

When MySQL developers first tried UTF-8, with its back-in-the-day six bytes per character, they likely balked: a CHAR(1) column would take six bytes; a CHAR(2) column would take 12 bytes; and so on.

Let‚Äôs be clear: that initial behavior, which was never released, was correct. It was well documented and widely adopted, and anybody who understood UTF-8 would agree that it was right.

But clearly, a MySQL developer (or user, or businessperson) was concerned that a user or two would do two things:

Choose CHAR columns. (The CHAR format is a relic nowadays. Back then, MySQL was faster with CHAR columns. Ever since 2005, it‚Äôs not.)
Choose to encode those CHAR columns as ‚Äúutf8‚Äù.
My guess is that MySQL developers broke their ‚Äúutf8‚Äù encoding to help these users: users who both 1) tried to optimize for space and speed; and 2) neglected to optimize for speed and space.

Nobody won. Users who wanted speed and space were still wrong to use ‚Äúutf8‚Äù CHAR columns, because those columns were still bigger and slower than they had to be. And developers who wanted correctness were wrong to use ‚Äúutf8‚Äù, because it can‚Äôt store ‚Äúüí©‚Äù.

Once MySQL published this invalid character set, it could never fix it: that would force every user to rebuild every database. MySQL finally released UTF-8 support in 2010, with a different name: ‚Äúutf8mb4‚Äù.

Why it‚Äôs so frustrating

Clearly I was frustrated this week. My bug was hard to find because I was fooled by the name ‚Äúutf8‚Äù. And I‚Äôm not the only one ‚Äî almost every article I found online touted ‚Äúutf8‚Äù as, well, UTF-8.

The name ‚Äúutf8‚Äù was always an error. It‚Äôs a proprietary character set. It created new problems, and it didn‚Äôt solve the problem it meant to solve.

It‚Äôs false advertising.

My take-away lessons

Database systems have subtle bugs and oddities, and you can avoid a lot of bugs by avoiding database systems.
If you need a database, don‚Äôt use MySQL or MariaDB. Use PostgreSQL.
If you need to use MySQL or MariaDB, never use ‚Äúutf8‚Äù. Always use ‚Äúutf8mb4‚Äù when you want UTF-8. Convert your database now to avoid headaches later.


----------------

Cassandra:

C/C++ driver: https://github.com/datastax/cpp-driver, click on top
link https://docs.datastax.com/en/developer/cpp-driver/latest and you
should get redirected to latest set of drivers.  For Bionic Beaver:

cassandra-cpp-driver_2.13.0-1_amd64.deb
cassandra-cpp-driver-dev_2.13.0-1_amd64.deb
cassandra-cpp-driver-dbg_2.13.0-1_amd64.deb

Manually install .deb files like "sudo dpkg -i  cassandra-cpp-driver*"

For that current version, documentation at:

https://docs.datastax.com/en/developer/cpp-driver/2.13/api/
https://docs.datastax.com/en/developer/cpp-driver/2.13/topics/


Database:

See this for how to install and check status afterwords:
http://cassandra.apache.org/doc/latest/getting_started/installing.html

For the JVM, I trust Azul Systems' free TCK checked Zulu distribution,
see https://www.azul.com/downloads/zulu-community/ They're also said
to cost a *lot* less than Oracle for better? tech support.  Amazon
also has a TCK checked distribution which I have no other knowledge
about, https://aws.amazon.com/corretto/.  Beware of any OpenJDK
distribution which is built by an entity that doesn't have a TCK
license to test it.  And of course bewere of Oracle licence games.

Note that on Bionic Beaver, stock Ubuntu ntp ntpd deamon does not
work; multiple systems Cassandra installations depend on accurate
time, should not matter for a single system for development.  Install
all the files like this:

sudo apt-get install cassandra libopts25 ntp sntp cassandra-tools ntp-doc

Then uninstall ntp:

sudo apt-get remove ntp

At the bottom of the above link, it says to use "nodetool status" to
verify that Cassandra is running, I got:

Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens       Owns (effective)  Host ID                               Rack
UN  127.0.0.1  210.72 KiB  256          100.0%            3f3cXXXXXXXXXXXXXXXXXXXXXXXXXXXX6786  rack1

And:

The default location of configuration files is /etc/cassandra.
The default location of log and data directories is /var/log/cassandra/ and /var/lib/cassandra.

On installation those should only take up a few megabytes.

Follow the "Next ->" buttons on the bottom of the pages for more.

To test the setup from the command line like psql:

cqlsh localhost
SELECT cluster_name, listen_address FROM system.local;

Which should return something like:

 cluster_name | listen_address
--------------+----------------
 Test Cluster |      127.0.0.1

(1 rows)

